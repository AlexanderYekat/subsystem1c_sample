#Область ОбработчикиСобытий

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	

Функция ИменаРеквизитовДляЗаполненияПараметровУказанияСерий() Экспорт
	Возврат "";
КонецФункции

Функция ПараметрыУказанияСерий(ИменаРеквизитов) Экспорт 
	Возврат Неопределено;
КонецФункции

#Область ПрограммныйИнтерфейс

// Возвращает статус документа.
//
// Параметры:
//  Ссылка - ДокументСсылка.ЧекККМ - Ссылка на чек ККМ.
//
// Возвращаемое значение:
//  ПеречислениеСсылка.СтатусыЧековККМ - Статус чека ККМ.
//
Функция СтатусДокумента(Ссылка) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	ЧекККМ.Статус
	|ИЗ
	|	Документ.ЧекККМ КАК ЧекККМ
	|ГДЕ
	|	ЧекККМ.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Статус;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

#Область ДействияПриОбменеЕГАИС

// Статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция);
	
КонецФункции

// Статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки);
	
КонецФункции

// Статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Структура - Структура со свойствами:
//   * НовыйСтатус - ПеречисленияСсылка.СтатусыИнформированияЕГАИС - Новый статус.
//   * ДальнейшееДействие1 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 1.
//   * ДальнейшееДействие2 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 2.
//   * ДальнейшееДействие3 - ПеречислениеСсылка.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие 3.
//
Функция СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Обновить статус после подготовки к передаче данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПодготовкиКПередачеДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после передачи данных
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС
//  СтатусОбработки - ПеречислениеСсылка.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПередачиДанных(ДокументСсылка, Операция, СтатусОбработки, ДополнительныеПараметры);
	
КонецФункции

// Обновить статус после получения данных из ЕГАИС.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция обмена с ЕГАИС.
//  ДополнительныеПараметры - Неопределено, Структура со свойствами:
//   * СтатусОбработки - Перечисление.СтатусыОбработкиСообщенийЕГАИС - Статус обработки сообщения.
//   * ОперацияКвитанции - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция, на которую получена квитанция.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Новый статус.
//
Функция ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры = Неопределено) Экспорт
	
	Возврат ЧекиЕГАИС.ОбновитьСтатусПослеПолученияДанных(ДокументСсылка, Операция, ДополнительныеПараметры);
	
КонецФункции


// Получить последовательность операций в течении жизненного цикла документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, для которого требуется обновить статус.
// 
// Возвращаемое значение:
//  ТаблицаЗначений - см. функцию ИнтеграцияЕГАИС.ПустаяТаблицаПоследовательностьОпераций().
//
Функция ПоследовательностьОпераций(ДокументСсылка) Экспорт
	
	Возврат ЧекиЕГАИС.ПоследовательностьОпераций(ДокументСсылка);
	
КонецФункции

// Обработчик изменения статуса документа.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.АктПостановкиНаБалансЕГАИС - Документ.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыОбработкиАктаПостановкиНаБалансЕГАИС - Предыдущий статус.
//  ПараметрыОбновленияСтатуса - Структура - см. функцию ИнтеграцияЕГАИС.ПараметрыОбновленияСтатуса().
//
Процедура ПриИзмененииСтатусаДокумента(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса) Экспорт
	
	ЧекиЕГАИС.ПриИзмененииСтатусаЧека(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус, ПараметрыОбновленияСтатуса);
	
	РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус);
	
КонецПроцедуры

// Опеределить необходимость перерасчета статуса оформления документов.
//
// Параметры:
//  ДокументСсылка - ДокументСсылка.ЧекЕГАИС - Документ, по которому требуется рассчитать статус оформления.
//  ПредыдущийСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
//  НовыйСтатус - ПеречислениеСсылка.СтатусыИнформированияЕГАИС - Предыдущий статус.
// 
// Возвращаемое значение:
//  Булево - Необходимость перерасчета статуса оформления.
//
Функция РассчитатьСтатусОформления(ДокументСсылка, ПредыдущийСтатус, НовыйСтатус) Экспорт
	Возврат Неопределено;
КонецФункции

#КонецОбласти

#Область ОбработкаМаркируемойПродукции

Функция ОбработатьДанныеШтрихкода(Форма, ДанныеШтрихкода, ПараметрыСканирования, ВложенныеШтрихкоды = Неопределено) Экспорт
	
	РезультатОбработки = Неопределено;
	
	Если ДанныеШтрихкода.ВидУпаковки = Перечисления.ВидыУпаковокИС.Логистическая Тогда
		
		РезультатОбработки =  ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования);
		
	Иначе
		
		РезультатОбработки = ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
	ПроверкаИПодборПродукцииИСУТ.ЗаполнитьКешШтрихкодовУпаковок(Форма, Форма.ПараметрыИнтеграцииФормыПроверкиИСМП());
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаМаркируемойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Если ДанныеШтрихкода.ВидыПродукцииКодаМаркировки.Найти(Перечисления.ВидыПродукцииИС.Алкогольная) <> Неопределено Тогда
		
		Если ДанныеШтрихкода.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		ИначеЕсли ДанныеШтрихкода.ТипШтрихкода = Перечисления.ТипыШтрихкодов.DataMatrix Тогда
			
			Возврат ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования);
			
		КонецЕсли;
		
	ИначеЕсли ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки)
		Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки)
		Или ИнтеграцияИСКлиентСервер.ВидыПродукцииИСМП(Истина).Найти(ДанныеШтрихкода.ВидПродукции)<>Неопределено Тогда
		
		Возврат ОбработатьДанныеШтрихкодаПротребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования);
		
	КонецЕсли;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаПротребительскойУпаковки(Форма, ДанныеШтрихкода, ПараметрыСканирования, ПараметрыЗаполнения = Неопределено)
	
	Объект = Форма;
	
	КоличествоМаркируемойПродукции = 1;
	Если ПараметрыЗаполнения <> Неопределено Или ШтрихкодированиеИС.ПрисутствуетТабачнаяПродукция(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
		КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоПачек;
	ИначеЕсли ШтрихкодированиеИС.ПрисутствуетПродукцияИСМП(ДанныеШтрихкода.ВидыПродукцииКодаМаркировки) Тогда
		КоличествоМаркируемойПродукции = ДанныеШтрихкода.КоличествоВложенныхЕдиниц;
	КонецЕсли;
	
	Если ПараметрыЗаполнения = Неопределено Тогда
		ПараметрыЗаполнения  = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
		РезультатОбработки   = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
		РодительскийШтрихкод = Неопределено;
	Иначе
		РезультатОбработки   = ПараметрыЗаполнения;
		РодительскийШтрихкод = ПараметрыЗаполнения.РодительскийШтрихкод
	КонецЕсли;
	
	ОбработатьБезМаркировки = Ложь;
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "ОбработатьБезМаркировки") Тогда
		ОбработатьБезМаркировки = ДанныеШтрихкода.ОбработатьБезМаркировки;
	КонецЕсли;
	
	ПараметрыПоиска = ИнтеграцияИСУТКлиентСервер.ПоляДляПоискаМаркированнойПродукции();
	
	ПараметрыПоиска.Номенклатура               = ДанныеШтрихкода.Номенклатура;
	ПараметрыПоиска.ХарактеристикаНоменклатуры = ДанныеШтрихкода.Характеристика;
	
	Если ЗначениеЗаполнено(ДанныеШтрихкода.Серия) Тогда
		ПараметрыПоиска.СерияНоменклатуры = ДанныеШтрихкода.Серия;
	КонецЕсли;
	
	НайденныеСтроки = Объект.Товары.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		СтрокаТоваров = НайденныеСтроки[0];
		СтрокаТоваров.Количество = СтрокаТоваров.Количество + КоличествоМаркируемойПродукции;
		
		РезультатОбработки.ИзмененныеСтроки.Добавить(СтрокаТоваров);
		
	Иначе
		
		СтрокаТоваров = Форма.ЭлементыФормы.Товары.ТекущиеДанные;
		
		Если СтрокаТоваров = Неопределено Или ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			СтрокаТоваров = Объект.Товары.Добавить();
		КонецЕсли;
		
		СтрокаТоваров.Номенклатура               = ДанныеШтрихкода.Номенклатура;
		СтрокаТоваров.ХарактеристикаНоменклатуры = ДанныеШтрихкода.Характеристика;
		СтрокаТоваров.СерияНоменклатуры          = ДанныеШтрихкода.Серия;
		СтрокаТоваров.Количество                 = КоличествоМаркируемойПродукции;
		
		РезультатОбработки.ДобавленныеСтроки.Добавить(СтрокаТоваров);
		
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(ДанныеШтрихкода, "Штрихкод") Тогда
		СтрокаТоваров.Штрихкод = ДанныеШтрихкода.Штрихкод;
	Иначе
		СтрокаТоваров.Штрихкод = ДанныеШтрихкода.ЗначениеШтрихкода;
	КонецЕсли;
	
	Если ОбработатьБезМаркировки Тогда
		Возврат РезультатОбработки;
	КонецЕсли;

	СтрокаТоваров.КоличествоАкцизныхМарок = СтрокаТоваров.КоличествоАкцизныхМарок + 1;
	
	Если РодительскийШтрихкод <> Неопределено Тогда
		
		ОтборАкцизныхМарок = Новый Структура("АкцизнаяМарка", РодительскийШтрихкод);
		РодительУказан = Объект.АкцизныеМарки.НайтиСтроки(ОтборАкцизныхМарок).Количество();
		
		Если Не РодительУказан Тогда
			НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаУпаковки.АкцизнаяМарка = РодительскийШтрихкод;
		КонецЕсли;
		
	Иначе
		Если Объект.ФормаРегистрацииПродаж Тогда
			НоваяСтрокаУпаковки = Объект.АкцизныеМарки.Добавить();
			НоваяСтрокаУпаковки.АкцизнаяМарка = ДанныеШтрихкода.ШтрихкодУпаковки;
		Иначе
			НоваяСтрокаУпаковки = Объект.ШтрихкодыУпаковок.Добавить();
			НоваяСтрокаУпаковки.ШтрихкодУпаковки = ДанныеШтрихкода.ШтрихкодУпаковки;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РезультатОбработки;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаУпаковкиМаркируемойПродукции(Форма, ДанныеШтрихкода, ВложенныеШтрихкоды, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	
	ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(Форма, ВложенныеШтрихкоды.ДеревоУпаковок, ПараметрыЗаполнения);
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(ФормаДокумента, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМаркиМаркируемойпродукции(ФормаДокумента, СтрокаДерева, ПараметрыЗаполнения, УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ВидПродукции <> Неопределено
			И СтрокаДерева.Номенклатура <> Неопределено
			И СтрокаДерева.Характеристика <> Неопределено
			И СтрокаДерева.Серия <> Неопределено
			И СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			Если ИнтеграцияИСКлиентСервер.ЭтоПродукцияИСМП(СтрокаДерева.ВидПродукции, Истина) Тогда
				
				ПараметрыЗаполнения.Вставить("РодительскийШтрихкод", УпаковкаВерхнегоУровня);
				ОбработатьДанныеШтрихкодаПротребительскойУпаковки(ФормаДокумента, СтрокаДерева, Неопределено, ПараметрыЗаполнения);
				
			ИначеЕсли СтрокаДерева.Видпродукции = Перечисления.ВидыПродукцииИС.Алкогольная Тогда
				
				#Область АлкогольнаяПродукция
				СерииУказываютсяВТабличнойЧастиТовары = Истина;//СерииУказываютсяВТабличнойЧастиТовары(ДокументОбъект, СтрокаДерева, ПараметрыЗаполнения);
			
				ВыполнитьПоискПоНоменклатуре = Истина;
				Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
					
					ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаДерева.ИдентификаторСтроки);
					СтрокиТовары = ФормаДокумента.Товары.НайтиСтроки(ПараметрыОтбора);
					
					Если СтрокиТовары.Количество() > 0 Тогда
						ВыполнитьПоискПоНоменклатуре = Ложь;
					КонецЕсли;
					
				КонецЕсли;
				
				Если ВыполнитьПоискПоНоменклатуре Тогда
					
					Если СерииУказываютсяВТабличнойЧастиТовары <> Неопределено
						И СерииУказываютсяВТабличнойЧастиТовары Тогда
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура",               СтрокаДерева.Номенклатура);
						ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДерева.Характеристика);
						ПараметрыОтбора.Вставить("СерияНоменклатуры",           СтрокаДерева.Серия);
						
					Иначе
						
						ПараметрыОтбора = Новый Структура;
						ПараметрыОтбора.Вставить("Номенклатура",               СтрокаДерева.Номенклатура);
						ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДерева.Характеристика);
						
					КонецЕсли;
					
					РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
						ФормаДокумента.Товары, ПараметрыОтбора,
						Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
					
					СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
					СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
					
				Иначе
					
					СтрокаТЧТовары                  = СтрокиТовары[0];
					СтрокиТЧДляУменьшенияКоличества = Неопределено;
					
				КонецЕсли;
				
				Если СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧТовары = Неопределено Тогда
					
					СтрокаТЧТовары = ФормаДокумента.ЭлементыФормы.Товары.ТекущиеДанные;
					
					Если СтрокаТЧТовары = Неопределено Или ЗначениеЗаполнено(СтрокаТЧТовары.Номенклатура) Тогда
						СтрокаТЧТовары = ФормаДокумента.Товары.Добавить();
					КонецЕсли;
					
					СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
					СтрокаТЧТовары.Номенклатура               = СтрокаДерева.Номенклатура;
					СтрокаТЧТовары.ХарактеристикаНоменклатуры = СтрокаДерева.Характеристика;
					СтрокаТЧТовары.СерияНоменклатуры          = СтрокаДерева.Серия;
					
					Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
						СтрокаТЧТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
					Иначе
						СтрокаТЧТовары.ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
					КонецЕсли;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
					
					ПроверитьСериюРассчитатьСтатус = Новый Структура;
					ПроверитьСериюРассчитатьСтатус.Вставить("Склад",                  ФормаДокумента.Склад);
					ПроверитьСериюРассчитатьСтатус.Вставить("ПараметрыУказанияСерий", ПараметрыЗаполнения.ПараметрыУказанияСерий);
					
					СтруктураДействий = Новый Структура;
					СтруктураДействий.Вставить("ПроверитьСериюРассчитатьСтатус", ПроверитьСериюРассчитатьСтатус);
					
				ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
					И СтрокаТЧТовары <> Неопределено Тогда
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
					
				Иначе
					
					Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
						
						Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
							
							Если СтрокаТЧТовары = Неопределено Тогда
								
								СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
								
								СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
							Иначе
								
								ФормаДокумента.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
								
								Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
								Если Индекс <> Неопределено Тогда
									ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
								КонецЕсли;
								
							КонецЕсли;
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						Иначе
							
							СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
							ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
							
							Если СтрокаТЧТовары = Неопределено Тогда
								
								СтрокаТЧТовары = ФормаДокумента.Товары.Вставить(ФормаДокумента.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
								ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
								
								СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
								
								АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
								
							Иначе
								
								АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
								
							КонецЕсли;
							
						КонецЕсли;
						
						Прервать;
						
					КонецЦикла;
					
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(СтрокаТЧТовары.ИдентификаторСтроки) Тогда
					СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
				КонецЕсли;
				
				СтрокаТЧАкцизныеМарки = ФормаДокумента.АкцизныеМарки.Добавить();
				СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
				СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
				СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
				СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровня;
				
				#КонецОбласти
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ОбработатьДанныеШтрихкодаЕдиницыАлкогольнойПродукции(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	
	ПараметрыЗаполнения = АкцизныеМаркиЕГАИС.ПараметрыЗаполненияТоваровИАкцизныхМарок(Форма, Истина, ПараметрыСканирования);
	ПараметрыЗаполнения.ЕстьСправка2                   = Ложь;
	ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция = "НоменклатураЕГАИС";
	ПараметрыЗаполнения.ЕстьКоличествоАкцизныхМарок    = Ложь;
	
	ПараметрыПоискаСтатусаУказанияСерии = Новый Структура;
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("Номенклатура",               ДанныеШтрихкода.Номенклатура);
	ПараметрыПоискаСтатусаУказанияСерии.Вставить("ХарактеристикаНоменклатуры", ДанныеШтрихкода.Характеристика);
	
	НайденныеСтроки = Форма.ЭтотОбъект.Товары.НайтиСтроки(ПараметрыПоискаСтатусаУказанияСерии);
	
	Если НайденныеСтроки.Количество() > 0 Тогда
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("Номенклатура",               ДанныеШтрихкода.Номенклатура);
		ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", ДанныеШтрихкода.Характеристика);
		ПараметрыОтбора.Вставить("СерияНоменклатуры",          ДанныеШтрихкода.Серия);
		
		РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
			Форма.ЭтотОбъект.Товары, ПараметрыОтбора,
			Неопределено, ДанныеШтрихкода.АлкогольнаяПродукция, ПараметрыЗаполнения);
		
		СтрокаТоваров                   = РезультатПоиска.ПолноеСоответствие;
		СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
		
	Иначе
		
		СтрокаТоваров                   = Неопределено;
		СтрокиТЧДляУменьшенияКоличества = Неопределено;
		
	КонецЕсли;
	
	Если СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТоваров = Неопределено Тогда
		
		СтрокаТоваров = Форма.ЭлементыФормы.Товары.ТекущиеДанные;
		
		Если СтрокаТоваров = Неопределено Или ЗначениеЗаполнено(СтрокаТоваров.Номенклатура) Тогда
			СтрокаТоваров = Форма.ЭтотОбъект.Товары.Добавить();
		КонецЕсли;
		
		СтрокаТоваров[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
		СтрокаТоваров.Номенклатура                     = ДанныеШтрихкода.Номенклатура;
		СтрокаТоваров.ХарактеристикаНоменклатуры       = ДанныеШтрихкода.Характеристика;
		СтрокаТоваров.СерияНоменклатуры                = ДанныеШтрихкода.Серия;
		
		АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТоваров, ПараметрыЗаполнения, 1);
		
	ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
		И СтрокаТоваров <> Неопределено Тогда
		
		АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТоваров, ПараметрыЗаполнения, 1);
		
	Иначе
		
		Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
			
			Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
				
				Если СтрокаТоваров = Неопределено Тогда
					
					СтрокаТоваров = СтрокаТЧДляУменьшенияКоличества;
					
					СтрокаТоваров[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
					
				Иначе
					
					Форма.ЭтотОбъект.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
					
					Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
					Если Индекс <> Неопределено Тогда
						ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
					КонецЕсли;
					
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТоваров, ПараметрыЗаполнения, 1);
				
			Иначе
				
				СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
				ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
				
				Если СтрокаТоваров = Неопределено Тогда
					
					СтрокаТоваров = Форма.ЭтотОбъект.Товары.Вставить(Форма.ЭтотОбъект.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
					ЗаполнитьЗначенияСвойств(СтрокаТоваров, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
					
					СтрокаТоваров[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = ДанныеШтрихкода.АлкогольнаяПродукция;
					
					АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТоваров, ПараметрыЗаполнения, 1);
					
				Иначе
					
					АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТоваров, ПараметрыЗаполнения, 1);
					
				КонецЕсли;
				
			КонецЕсли;
			
			Прервать;
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаТоваров.КоличествоАкцизныхМарок = СтрокаТоваров.КоличествоАкцизныхМарок + 1;
	
	Если Не ЗначениеЗаполнено(СтрокаТоваров.КлючСтроки) Тогда
		СтрокаТоваров.КлючСтроки = СтрокаТоваров.НомерСтроки;
	КонецЕсли;
	
	АкцизныеМаркиСтрокаТЧ = Форма.ЭтотОбъект.АкцизныеМарки.Добавить();
	АкцизныеМаркиСтрокаТЧ.КлючСтроки          = СтрокаТоваров.КлючСтроки;
	АкцизныеМаркиСтрокаТЧ.АкцизнаяМарка       = ДанныеШтрихкода.ШтрихкодУпаковки;
	АкцизныеМаркиСтрокаТЧ.Справка2            = ДанныеШтрихкода.Справка2;
	
	Результат.ИзмененныеСтроки  = ПараметрыЗаполнения.ИзмененныеСтроки;
	Результат.ДобавленныеСтроки = ПараметрыЗаполнения.ДобавленныеСтроки;
	
	Возврат Результат;
	
КонецФункции

Функция ОбработатьДанныеШтрихкодаЕдиницыСНомеромИСерией(Форма, ДанныеШтрихкода, ПараметрыСканирования) Экспорт
	
	Результат = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода(Неопределено, ДанныеШтрихкода);
	Результат.ТекстОшибки = НСтр("ru = 'Обработка кодов DataMatrix в документе Чек ККМ не поддерживается. Считайте код акцизной марки.'");
	
	Возврат Результат;
	
КонецФункции

// Заполняет табличные части Акцизные марки и Товары по данным дерева упаковок.
//
// Параметры:
//  ДокументОбъект - ДокументОбъект.ТТНИсходящаяЕГАИС - ТТН ЕГАИС (исходящая).
//  ДеревоУпаковок - ДеревоЗначений - дерево упаковок.
//  ШтрихкодыУпаковок - ТаблицаЗначений - таблица штрихкодов упаковок и их хеш-сумм.
//  УпаковкаВерхнегоУровня - СправочникСсылка.ШтрихкодыУпаковокТоваров - Упаковка верхнего уровня.
//
Процедура ЗаполнитьТоварыИАкцизныеМарки(ФормаДокумента, ДеревоУпаковок, ПараметрыЗаполнения, УпаковкаВерхнегоУровня = Неопределено) Экспорт
	
	Для Каждого СтрокаДерева Из ДеревоУпаковок.Строки Цикл
		
		Если УпаковкаВерхнегоУровня = Неопределено
			И СтрокаДерева.ТипУпаковки <> Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			УпаковкаВерхнегоУровняСтрокиДерева = СтрокаДерева.ШтрихкодУпаковки;
		Иначе
			УпаковкаВерхнегоУровняСтрокиДерева = УпаковкаВерхнегоУровня;
		КонецЕсли;
		
		ЗаполнитьТоварыИАкцизныеМарки(
			ФормаДокумента, СтрокаДерева, ПараметрыЗаполнения,
			УпаковкаВерхнегоУровняСтрокиДерева);
		
		Если СтрокаДерева.ТипУпаковки = Перечисления.ТипыУпаковок.МаркированныйТовар Тогда
			
			СерииУказываютсяВТабличнойЧастиТовары = СерииУказываютсяВТабличнойЧастиТовары(ФормаДокумента, СтрокаДерева, ПараметрыЗаполнения);
			
			ВыполнитьПоискПоНоменклатуре = Истина;
			Если ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
				
				ПараметрыОтбора = Новый Структура("ИдентификаторСтроки", СтрокаДерева.ИдентификаторСтроки);
				СтрокиТовары = ФормаДокумента.Товары.НайтиСтроки(ПараметрыОтбора);
				
				Если СтрокиТовары.Количество() > 0 Тогда
					ВыполнитьПоискПоНоменклатуре = Ложь;
				КонецЕсли;
				
			КонецЕсли;
			
			Если ВыполнитьПоискПоНоменклатуре Тогда
				
				Если СерииУказываютсяВТабличнойЧастиТовары <> Неопределено
					И СерииУказываютсяВТабличнойЧастиТовары Тогда
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",               СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДерева.Характеристика);
					ПараметрыОтбора.Вставить("СерияНоменклатуры",         СтрокаДерева.Серия);
					
				Иначе
					
					ПараметрыОтбора = Новый Структура;
					ПараметрыОтбора.Вставить("Номенклатура",               СтрокаДерева.Номенклатура);
					ПараметрыОтбора.Вставить("ХарактеристикаНоменклатуры", СтрокаДерева.Характеристика);
					
				КонецЕсли;
				
				РезультатПоиска = АкцизныеМаркиЕГАИС.НайтиСтрокиТоваров(
					ФормаДокумента.Товары, ПараметрыОтбора,
					Неопределено, СтрокаДерева.АлкогольнаяПродукция, ПараметрыЗаполнения);
				
				СтрокаТЧТовары                  = РезультатПоиска.ПолноеСоответствие;
				СтрокиТЧДляУменьшенияКоличества = РезультатПоиска.КЗаполнению;
				
			Иначе
				
				СтрокаТЧТовары                  = СтрокиТовары[0];
				СтрокиТЧДляУменьшенияКоличества = Неопределено;
				
			КонецЕсли;
			
			Если СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары = Неопределено Тогда
				
				СтрокаТЧТовары = ФормаДокумента.Товары.Добавить();
				
				СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
				СтрокаТЧТовары.Номенклатура               = СтрокаДерева.Номенклатура;
				СтрокаТЧТовары.ХарактеристикаНоменклатуры = СтрокаДерева.Характеристика;
				СтрокаТЧТовары.СерияНоменклатуры          = СтрокаДерева.Серия;
				
				Если Не ЗначениеЗаполнено(СтрокаДерева.ИдентификаторСтроки) Тогда
					СтрокаТЧТовары.ИдентификаторСтроки = Новый УникальныйИдентификатор;
				Иначе
					СтрокаТЧТовары.ИдентификаторСтроки = СтрокаДерева.ИдентификаторСтроки;
				КонецЕсли;
				
				АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
				
			ИначеЕсли СтрокиТЧДляУменьшенияКоличества = Неопределено
				И СтрокаТЧТовары <> Неопределено Тогда
				
				СвойстваМаркируемойПродукции = ИнтеграцияИСУТ.СвойстваМаркируемойПродукцииПоСтрокеТовары(ФормаДокумента.СвойстваМаркируемойПродукцияГосИС, СтрокаТЧТовары);
				АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1, СвойстваМаркируемойПродукции.МаркируемаяПродукция);
				
			Иначе
				
				Для Каждого СтрокаТЧДляУменьшенияКоличества Из СтрокиТЧДляУменьшенияКоличества Цикл
					
					Если СтрокаТЧДляУменьшенияКоличества.Количество <= 1 Тогда
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = СтрокаТЧДляУменьшенияКоличества;
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
						Иначе
							
							ФормаДокумента.Товары.Удалить(СтрокаТЧДляУменьшенияКоличества);
							
							Индекс = ПараметрыЗаполнения.ИзмененныеСтроки.Найти(СтрокаТЧДляУменьшенияКоличества);
							Если Индекс <> Неопределено Тогда
								ПараметрыЗаполнения.ИзмененныеСтроки.Удалить(Индекс);
							КонецЕсли;
							
						КонецЕсли;
						
						АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
						
					Иначе
						
						СтрокаТЧДляУменьшенияКоличества.Количество = СтрокаТЧДляУменьшенияКоличества.Количество - 1;
						ПараметрыЗаполнения.ИзмененныеСтроки.Добавить(СтрокаТЧДляУменьшенияКоличества);
						
						Если СтрокаТЧТовары = Неопределено Тогда
							
							СтрокаТЧТовары = ФормаДокумента.Товары.Вставить(ФормаДокумента.Товары.Индекс(СтрокаТЧДляУменьшенияКоличества) + 1);
							ЗаполнитьЗначенияСвойств(СтрокаТЧТовары, СтрокаТЧДляУменьшенияКоличества,,"Количество, КоличествоУпаковок, ИдентификаторСтроки");
							
							СтрокаТЧТовары[ПараметрыЗаполнения.ИмяКолонкиАлкогольнаяПродукция] = СтрокаДерева.АлкогольнаяПродукция;
							
							АкцизныеМаркиЕГАИС.ОбработатьДобавленнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						Иначе
							
							АкцизныеМаркиЕГАИС.ОбработатьИзмененнуюСтроку(СтрокаТЧТовары, ПараметрыЗаполнения, 1);
							
						КонецЕсли;
						
					КонецЕсли;
					
					Прервать;
					
				КонецЦикла;
				
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(СтрокаТЧТовары.ИдентификаторСтроки) Тогда
				СтрокаТЧТовары.ИдентификаторСтроки = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			СтрокаТЧАкцизныеМарки = ФормаДокумента.АкцизныеМарки.Добавить();
			СтрокаТЧАкцизныеМарки.ИдентификаторСтроки = СтрокаТЧТовары.ИдентификаторСтроки;
			СтрокаТЧАкцизныеМарки.АкцизнаяМарка       = СтрокаДерева.ШтрихкодУпаковки;
			СтрокаТЧАкцизныеМарки.Справка2            = СтрокаДерева.Справка2;
			СтрокаТЧАкцизныеМарки.ШтрихкодУпаковки    = УпаковкаВерхнегоУровня;
			
			ДанныеШтрихкода = ШтрихкодированиеИС.ИнициализироватьДанныеШтрихкода();
			ЗаполнитьЗначенияСвойств(ДанныеШтрихкода, СтрокаДерева);
			ДанныеШтрихкода.Штрихкод = СтрокаДерева.ЗначениеШтрихкода;
			РезультаДобавления = ШтрихкодированиеИС.ИнициализироватьРезультатОбработкиШтрихкода();
			ШтрихкодированиеИС.ЗакэшироватьОбработанныеШтрихкоды(ФормаДокумента, ДанныеШтрихкода, РезультаДобавления);
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция СерииУказываютсяВТабличнойЧастиТовары(ФормаДокумента, СтрокаДерева, ПараметрыЗаполнения)
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

#Область Статусы

// Возвращает статус по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.СтатусыИнформированияЕГАИС - Статус по-умолчанию.
//
Функция СтатусПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусПоУмолчанию();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокСвободныйОстаток() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокСвободныйОстаток();
	
КонецФункции

// Возвращает статусы движений.
//
// Возвращаемое значение:
//  Массив - Статусы.
//
Функция СтатусыДвиженийАкцизныхМарокКоличество() Экспорт
	
	Возврат ЧекиЕГАИС.СтатусыДвиженийАкцизныхМарокКоличество();
	
КонецФункции

// Возвращает дальнейшее действие по умолчанию.
// 
// Возвращаемое значение:
//  Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС - Дальнейшее действие по-умолчанию.
//
Функция ДальнейшееДействиеПоУмолчанию() Экспорт
	
	Возврат ЧекиЕГАИС.ДальнейшееДействиеПоУмолчанию();
	
КонецФункции

#КонецОбласти

#Область СообщенияЕГАИС

// Сообщение к передаче XML
//
// Параметры:
//  ДокументСсылка - ДокументСсылка - Ссылка на документ
//  Операция - ПеречислениеСсылка.ВидыДокументовЕГАИС - Операция ЕГАИС.
// 
// Возвращаемое значение:
//  Строка - Текст сообщения XML
//
Функция СообщениеКПередачеXML(ДокументСсылка, ДальнейшееДействие, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ПередайтеДанные Тогда
		
		Возврат ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры);
		
	ИначеЕсли ДальнейшееДействие = Перечисления.ДальнейшиеДействияПоВзаимодействиюЕГАИС.ОтменитеОперацию Тогда
		
		Возврат ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#Область СканированиеАлкогольнойПродукции

Функция ТаблицаАлкогольнойПродукцииКОпределениюСправок2(ДокументОбъект) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.НоменклатураЕГАИС КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.ХарактеристикаНоменклатуры КАК Характеристика,
	|	ТабличнаяЧасть.СерияНоменклатуры КАК Серия,
	|	ТабличнаяЧасть.Количество КАК Количество
	|ПОМЕСТИТЬ ВТТовары
	|ИЗ
	|	&Товары КАК ТабличнаяЧасть
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабличнаяЧасть.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Номенклатура КАК Номенклатура,
	|	ТабличнаяЧасть.Характеристика КАК Характеристика,
	|	ТабличнаяЧасть.Серия КАК Серия,
	|	ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка) КАК Справка2,
	|	СУММА(ТабличнаяЧасть.Количество) КАК Количество,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ) КАК Маркируемая
	|ИЗ
	|	ВТТовары КАК ТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО ТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторАлкогольнойПродукцииЕГАИС КАК КлассификаторАлкогольнойПродукцииЕГАИС
	|		ПО ТабличнаяЧасть.АлкогольнаяПродукция = КлассификаторАлкогольнойПродукцииЕГАИС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыАлкогольнойПродукции КАК ВидыАлкогольнойПродукции
	|		ПО (КлассификаторАлкогольнойПродукцииЕГАИС.ВидПродукции = ВидыАлкогольнойПродукции.Ссылка)
	|ГДЕ
	|	НЕ СправочникНоменклатура.АлкогольнаяПродукцияВоВскрытойТаре
	|	И СправочникНоменклатура.АлкогольнаяПродукция
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабличнаяЧасть.Номенклатура,
	|	ТабличнаяЧасть.АлкогольнаяПродукция,
	|	ТабличнаяЧасть.Характеристика,
	|	ЕСТЬNULL(ВидыАлкогольнойПродукции.Маркируемый, ЛОЖЬ),
	|	ТабличнаяЧасть.Серия";
	
	Запрос.УстановитьПараметр("Товары", ДокументОбъект.Товары.Выгрузить());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ШтрихкодыУпаковок(ДокументСсылка, ЗаполнитьСправки2ИзРегистра = Ложь) Экспорт
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = ДокументСсылка;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ПараметрыФормированияТекстаЗапроса.ЗаполнитьСправки2ИзРегистра     = ЗаполнитьСправки2ИзРегистра;
	
	Возврат ШтрихкодированиеЕГАИС.ВложенныеШтрихкодыУпаковокПоДокументу(ПараметрыФормированияТекстаЗапроса);
	
КонецФункции

#КонецОбласти

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт

	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(КассаККМ)
	|	И ЗначениеРазрешено(Склад)";

КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СообщенияЕГАИС

Функция ЧекЕГАИСXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                                  КАК Номер,
		|	Шапка.Дата                                   КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)           КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                                 КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка         КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.ОрганизацияЕГАИС = КлассификаторОрганизацийЕГАИС.Ссылка
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСтроки              КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	Товары.Цена                    КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Шапка.ОрганизацияЕГАИС             КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.КлючСтроки          КАК ИдентификаторСтроки,
		|	ЕСТЬNULL(ТабличнаяЧастьТовары.НоменклатураЕГАИС, ЗНАЧЕНИЕ(Справочник.КлассификаторАлкогольнойПродукцииЕГАИС.ПустаяСсылка)) КАК АлкогольнаяПродукция,
		|	ТабличнаяЧасть.Справка2            КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка       КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки    КАК ШтрихкодРодительскойУпаковки
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ЧекККМ.Товары КАК ТабличнаяЧастьТовары
		|		ПО ТабличнаяЧастьТовары.КлючСтроки = ТабличнаяЧасть.КлючСтроки
		|		И ТабличнаяЧастьТовары.КлючСтроки <> """"
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ПараметрыФормированияТекстаЗапроса.ИспользоватьИдентификаторСтроки = Истина;
	ПараметрыФормированияТекстаЗапроса.ИмяПоляАлкогольнаяПродукция     = "НоменклатураЕГАИС";
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

Функция ЧекЕГАИСОтменаXML(ДокументСсылка, ДополнительныеПараметры)
	
	ТекстыЗапроса = Новый СписокЗначений;
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	ЕГАИСПрисоединенныеФайлы.Документ      КАК Ссылка,
		|	КОЛИЧЕСТВО(ЕГАИСПрисоединенныеФайлы.Ссылка) КАК ПоследнийНомер
		|ПОМЕСТИТЬ Версии
		|ИЗ
		|	Справочник.ЕГАИСПрисоединенныеФайлы КАК ЕГАИСПрисоединенныеФайлы
		|ГДЕ
		|	ЕГАИСПрисоединенныеФайлы.Документ = &Ссылка
		|	И ЕГАИСПрисоединенныеФайлы.Операция = &Операция
		|	И ЕГАИСПрисоединенныеФайлы.ТипСообщения = ЗНАЧЕНИЕ(Перечисление.ТипыЗапросовИС.Исходящий)
		|СГРУППИРОВАТЬ ПО
		|	ЕГАИСПрисоединенныеФайлы.Документ
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Шапка.Номер                                  КАК Номер,
		|	Шапка.Дата                                   КАК Дата,
		|	ЕСТЬNULL(Версии.ПоследнийНомер, 0)           КАК ПоследнийНомерВерсии,
		|	Шапка.Ссылка                                 КАК ДокументОснование,
		|	КлассификаторОрганизацийЕГАИС.Ссылка         КАК ОрганизацияЕГАИС,
		|	КлассификаторОрганизацийЕГАИС.Код            КАК ИдентификаторФСРАР,
		|	КлассификаторОрганизацийЕГАИС.ФорматОбмена   КАК ФорматОбмена,
		|	КлассификаторОрганизацийЕГАИС.ИНН            КАК ИНН,
		|	КлассификаторОрганизацийЕГАИС.КПП            КАК КПП,
		|	КлассификаторОрганизацийЕГАИС.ТорговыйОбъект КАК ТорговыйОбъект,
		|	Шапка.Ответственный                          КАК Ответственный,
		|	&НомерСмены                                  КАК НомерСмены,
		|	&НомерЧека                                   КАК НомерЧекаККМ,
		|	&СерийныйНомер                               КАК СерийныйНомерККМ
		|ПОМЕСТИТЬ Шапка
		|ИЗ
		|	Документ.ЧекККМ КАК Шапка
		|		ЛЕВОЕ СОЕДИНЕНИЕ Версии КАК Версии
		|		ПО Шапка.Ссылка = Версии.Ссылка
		|		
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.КлассификаторОрганизацийЕГАИС КАК КлассификаторОрганизацийЕГАИС
		|		ПО Шапка.Склад = КлассификаторОрганизацийЕГАИС.ТорговыйОбъект
		|		 И Шапка.Организация = КлассификаторОрганизацийЕГАИС.Контрагент
		|ГДЕ
		|	Шапка.Ссылка = &Ссылка
		|;
		|
		|//#РезультатЗапроса#////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	*
		|ИЗ
		|	Шапка
		|",
		"Шапка");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	Товары.КлючСтроки              КАК ИдентификаторСтроки,
		|	Товары.НомерСтроки             КАК НомерСтроки,
		|	Товары.Количество              КАК Количество,
		|	-Товары.Цена                   КАК Цена,
		|	Товары.Штрихкод                КАК Штрихкод,
		|	Товары.НоменклатураЕГАИС       КАК АлкогольнаяПродукция,
		|	Товары.НоменклатураЕГАИС.Объем КАК Объем
		|ИЗ
		|	Документ.ЧекККМ.Товары КАК Товары
		|ГДЕ
		|	Товары.Ссылка = &Ссылка
		|	И Товары.Номенклатура.АлкогольнаяПродукция
		|	И Товары.Номенклатура.ВидАлкогольнойПродукцииЕГАИС.Маркируемый
		|	И НЕ Товары.Номенклатура.АлкогольнаяПродукцияВоВскрытойТаре
		|",
		"Товары");
	
	ТекстыЗапроса.Добавить(
		"ВЫБРАТЬ
		|	null 											КАК ИдентификаторСтроки,
		|	Шапка.ОрганизацияЕГАИС                    		КАК ОрганизацияЕГАИС,
		|	ТабличнаяЧасть.Справка2                   		КАК Справка2,
		|	ТабличнаяЧасть.АкцизнаяМарка              		КАК ШтрихкодУпаковки,
		|	ТабличнаяЧасть.ШтрихкодУпаковки           		КАК ШтрихкодРодительскойУпаковки,
		|	ТабличнаяЧасть.Справка2.АлкогольнаяПродукция 	КАК АлкогольнаяПродукция
		|ПОМЕСТИТЬ ВТВложенныеШтрихкодыИсходныеДанные
		|ИЗ
		|	Документ.ЧекККМ.АкцизныеМарки КАК ТабличнаяЧасть
		|		ЛЕВОЕ СОЕДИНЕНИЕ Шапка КАК Шапка
		|		ПО ИСТИНА
		|ГДЕ
		|	ТабличнаяЧасть.Ссылка = &Ссылка
		|ИНДЕКСИРОВАТЬ ПО
		|	ШтрихкодУпаковки,
		|	ШтрихкодРодительскойУпаковки
		|");
	
	ПараметрыФормированияТекстаЗапроса = ШтрихкодированиеЕГАИС.ПараметрыФормированияТекстаЗапросаВложенныхШтрихкодов();
	ПараметрыФормированияТекстаЗапроса.ДокументСсылка                  = Неопределено;
	ТекстыЗапроса.Добавить(
		ШтрихкодированиеЕГАИС.ТекстЗапросаВложенныхШтрихкодовПоДокументу(ПараметрыФормированияТекстаЗапроса),
		"ВложенныеШтрихкоды");
	
	МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка",   ДокументСсылка);
	Запрос.УстановитьПараметр("Операция", Перечисления.ВидыДокументовЕГАИС.ЧекККМ);
	Запрос.УстановитьПараметр("ПустыеЗначенияНоменклатуры", ИнтеграцияИС.НезаполненныеЗначенияОпределяемогоТипа("Номенклатура"));
	
	Если ДополнительныеПараметры = Неопределено Тогда
		ПараметрыЧека = ИнтеграцияЕГАИСУТ.ПараметрыЧека(ДокументСсылка);
		НомерЧека     = ПараметрыЧека.НомерЧека;
		НомерСмены    = ПараметрыЧека.НомерСмены;
		СерийныйНомер = ПараметрыЧека.СерийныйНомер;
	Иначе
		НомерЧека     = ДополнительныеПараметры.НомерЧека;
		НомерСмены    = ДополнительныеПараметры.НомерСмены;
		СерийныйНомер = ДополнительныеПараметры.СерийныйНомер;
	КонецЕсли;
	
	Запрос.УстановитьПараметр("НомерЧека",     НомерЧека);
	Запрос.УстановитьПараметр("НомерСмены",    НомерСмены);
	Запрос.УстановитьПараметр("СерийныйНомер", СерийныйНомер);
	
	РезультатыЗапроса = ИнтеграцияИС.ВыполнитьПакетЗапросов(Запрос, ТекстыЗапроса);
	
	Возврат ЧекиЕГАИС.ЧекЕГАИСXML(ДокументСсылка, РезультатыЗапроса, МенеджерВременныхТаблиц);
	
КонецФункции

#КонецОбласти

#Область Проведение

Функция ДополнительныеИсточникиДанныхДляДвижений(ИмяРегистра) Экспорт

	ИсточникиДанных = Новый Соответствие;

	Возврат ИсточникиДанных;

КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Регистры = Неопределено) Экспорт
	
	////////////////////////////////////////////////////////////////////////////
	// Создадим запрос инициализации движений
	
	Запрос = Новый Запрос;
	ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка);
	
	////////////////////////////////////////////////////////////////////////////
	// Сформируем текст запроса
	ТекстыЗапроса = Новый СписокЗначений;
	ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры);
	
	ИнтеграцияЕГАИС.ИнициализироватьТаблицыДляДвижений(Запрос, ТекстыЗапроса, ДополнительныеСвойства.ТаблицыДляДвижений, Истина);
	
КонецПроцедуры

Процедура ЗаполнитьПараметрыИнициализации(Запрос, ДокументСсылка)
	
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	ДанныеДокумента.Архивный                      КАК Архивный,
	|	ДанныеДокумента.Ссылка                        КАК Ссылка,
	|	ДанныеДокумента.КассаККМ.Владелец             КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка) КАК Контрагент,
	|	ДанныеДокумента.Дата                          КАК Период,
	|	ДанныеДокумента.ОрганизацияЕГАИС              КАК ОрганизацияЕГАИС
	|ИЗ
	|	Документ.ЧекККМ КАК ДанныеДокумента
	|ГДЕ
	|	ДанныеДокумента.Ссылка = &Ссылка";
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	Запрос.УстановитьПараметр("Архивный",                                 Реквизиты.Архивный);
	Запрос.УстановитьПараметр("Ссылка",                                   ДокументСсылка);
	Запрос.УстановитьПараметр("Период",                                   Реквизиты.Период);
	Запрос.УстановитьПараметр("Организация",                              Реквизиты.Организация);
	Запрос.УстановитьПараметр("ОрганизацияЕГАИС",                         Реквизиты.ОрганизацияЕГАИС);
	
КонецПроцедуры

Функция ТекстЗапросаТаблицаОстаткиАлкогольнойПродукцииЕГАИС(Запрос, ТекстыЗапроса, Регистры)
	
	ИмяРегистра = "ОстаткиАлкогольнойПродукцииЕГАИС";
	
	Если НЕ ИнтеграцияЕГАИС.ТребуетсяТаблицаДляДвижений(ИмяРегистра, Регистры) Тогда
		Возврат "";
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)  КАК ВидДвижения,
	|	&Период                            КАК Период,
	|	ТаблицаАкцизныеМарки.Ссылка        КАК Ссылка,
	|	&ОрганизацияЕГАИС                  КАК ОрганизацияЕГАИС,
	|	ТаблицаАкцизныеМарки.Справка2      КАК Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция КАК АлкогольнаяПродукция,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК Количество,
	|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ТаблицаАкцизныеМарки.АкцизнаяМарка) КАК СвободныйОстаток
	|ИЗ
	|	Документ.ЧекККМ.АкцизныеМарки КАК ТаблицаАкцизныеМарки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Справки2ЕГАИС КАК Справки2ЕГАИС
	|			ПО Справки2ЕГАИС.Ссылка = ТаблицаАкцизныеМарки.Справка2
	|ГДЕ
	|	(НЕ &Архивный)
	|	И ТаблицаАкцизныеМарки.Ссылка = &Ссылка
	|	И ТаблицаАкцизныеМарки.Справка2 <> ЗНАЧЕНИЕ(Справочник.Справки2ЕГАИС.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаАкцизныеМарки.Ссылка,
	|	ТаблицаАкцизныеМарки.Справка2,
	|	Справки2ЕГАИС.АлкогольнаяПродукция
	|";
	
	ТекстыЗапроса.Добавить(ТекстЗапроса, ИмяРегистра);
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти

#КонецЕсли

